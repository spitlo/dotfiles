#!/usr/bin/env bash

# Set some variables
tab=$(echo -e '\t')
nl=$(echo -e ' \n')
dotfiles_dir="$(dirname "${BASH_SOURCE}")"

function _help() {
  shopt -s extglob

  while IFS= read -r line
  do
    IFS='Â°'; read -ra arr <<< "$line"
    cmnd=${arr[0]}
    cmnd="${cmnd%%*( )}"
    fcmnd=$(printf "%-12s" $cmnd | sed -e "s/\([\/\(\)]\)/${GREEN}\1${MAGENTA}/g");
    desc=${arr[1]}
    fdesc=$(echo $desc | sed -e "s/\([\'\`\/\+\<\>\(\)]\)/${GREEN}\1${YELLOW}/g");
    if [[ "$cmnd" ]]; then
      printf "${MAGENTA}%s${RESET} ${LIGHTGREEN}-${RESET} ${YELLOW}%s\n" $fcmnd $fdesc
    else
      echo "$nl"
    fi
  done < "$dotfiles_dir/.help"

  # Clean up
  shopt -u extglob
  echo "${RESET}${nl}"
}

function _backup() {
  backupdir="$dotfiles_dir/bak/$(date -I)";
  echo "Backing up ALL dotfiles to $backupdir."
  mkdir -p "$backupdir"
  for file in "$HOME"/.[a-z0-9]*; do
    if [ -f "${file}" ]; then
      rsync -avq --delete "$file" "$backupdir"
      printf "."
    fi
  done
  echo -e "\nBacking up ~/bin folder."
  cp -r "$HOME/bin" "$backupdir"
  cd "$dotfiles_dir"
  echo -e "\nBack up done!"
}

function _sync() {
  if [ "$1" == "--force" -o "$1" == "-f" ]; then
    doIt
  else
    read -p "This may overwrite existing files in your home directory. Are you sure? (y/n) " -n 1
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      doIt
    else
      echo "Aborted."
      return
    fi
  fi
  declare -f -F r > /dev/null && r || source $HOME/.bash_profile || echo -e "Could not reload profile. Run ${BOLD}${YELLOW}source $HOME/.bash_profile${RESET} manually."
}

# https://github.com/mathiasbynens/dotfiles/blob/master/bootstrap.sh
function doIt() {
  rsync --exclude ".git/" --exclude "bak/" --exclude ".DS_Store" --exclude "does" \
    --exclude "help.*" --exclude ".gitignore" --exclude ".extras" \
    --exclude "README.md" --exclude "LICENSE-MIT.txt" -av --no-perms . ~
}

cd "$dotfiles_dir"

case "$1" in
  update)
    git pull origin master && _sync --force
  ;;

  copy)
    _sync $2
  ;;

  reset)
    git fetch --all && git reset --hard origin/master && _sync --force
  ;;

  backup)
    _backup
  ;;

  install)
    if [ -f "~/.bashrc" ]; then
      echo '[ -n "$PS1" ] && source ~/.bash_profile' >> ~/.bashrc
    fi
    cp -i ./.extras ~ && nano ~/.extras && _sync --force && _help && echo -e "Install done."
  ;;

  help)
    _help
  ;;

  *)
    echo -e "${BOLD}USAGE${RESET}: ${YELLOW}. does${RESET} [ sync | copy | reset | backup | help ]"
    echo -e "\t${UNDERLINE}sync${RESET} pulls from git and copies the files."
    echo -e "\t${UNDERLINE}copy${RESET} only copies the files."
    echo -e "\t${UNDERLINE}reset${RESET} will do a hard reset from repo. Warning! Will overwrite all local files."
    echo -e "\t${UNDERLINE}backup${RESET} saves all .files from  to ~ to ~/dotfiles/bak."
    echo -e "\t${UNDERLINE}install${RESET} Creates and let's you edit the .extras file before copying the files."
    echo -e "\t${UNDERLINE}help${RESET} prints a partial list of commands."
esac

unset _sync && unset _backup && unset _help && unset doIt
