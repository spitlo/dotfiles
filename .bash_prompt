# shellcheck shell=bash
# shellcheck disable=SC2034

# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles

# Fastest possible way to check if repo is dirty. a savior for the WebKit repo.
function parse_git_dirty() {
  git diff --quiet --ignore-submodules HEAD 2>/dev/null; [ $? -eq 1 ]
  echo '*'
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

# Only show username/host if not default
function usernamehost() {
  if [ "$USER" != "$DEFAULT_USERNAME" ]; then
    echo "${MAGENTA}$USER ${WHITE}at ${ORANGE}$HOSTNAME ${WHITE}in "
  fi
}

function statusline() {
  # Is this a virtual env?
  if [ -z "$VIRTUAL_ENV" ]; then
    # No. HH:MM:SS + space = 9 chars
    prefix_length=9
    virtualenv_name=""
  else
    # Yes. Get length of virtualenv name + parenthesis + space + time
    virtualenv_name=$(basename "$VIRTUAL_ENV")
    virtualenv_name_length=$(echo "$virtualenv_name" | awk '{print length}')
    prefix_length=$((virtualenv_name_length + 12));
    virtualenv_name=" [${ORANGE}$virtualenv_name${RESET}]"
  fi

  # Now get node version
  node_version=$(node -v)
  node_version_length=$(echo "$node_version" | awk '{print length}')
  prefix_length=$((prefix_length + node_version_length + 4))
  node_version=" [${YELLOW}$node_version${RESET}]"

  # Create a $fill of all screen width minus the time string and a space:
  (( fillsize=COLUMNS-prefix_length ))
  fill=$virtualenv_name""$node_version
  while [ "$fillsize" -gt "0" ]; do
    fill="-${fill}"
    (( fillsize=fillsize-1 ))
  done
}

function timeline() {
  # Create a $fill of all screen width minus the time string and a space:
  (( fillsize=COLUMNS-9 ))
  fill=""
  while [ "$fillsize" -gt "0" ]; do
    fill="-${fill}"
    (( fillsize=fillsize-1 ))
  done
}

function output_statusline() {
  statusline
  echo "$fill $(date +"%T")"
}

function output_timeline() {
  timeline
  echo "$fill $(date +"%T")"
}

if exists starship; then
  starship_precmd_user_func="output_timeline"
  eval "$(starship init bash)"
else
  # Prompt variable:
  PS1='$fill \t\n'"\[\e]2;$PWD\[\a\]\[\e]1;\]$(basename "$(dirname "$PWD")")/\W\[\a\]${BOLD}\$(usernamehost)\[$GREEN\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[$WHITE\]\n\$ \[$RESET\]"
  # Reset color for command output
  # (this one is invoked every time before a command is executed):
  trap 'echo -ne "${RESET}"' DEBUG
  PROMPT_COMMAND=statusline
fi
