#!/usr/bin/env bash
# shellcheck disable=SC1090
set -eu

# Binenv does about the same as this script: https://github.com/devops-works/binenv
# Commands we might want to support (from the binenv list):
# bat, fzf, zola...

# Constants
BLUE='\033[1;34m'
BROWN='\033[0;33m'
GREEN='\033[1;32m'
NC='\033[0m'
RED='\033[0;31m'
USAGE="
${BROWN}Usage${NC}: $0 [command]
Utility script to update a few smaller commands that live in my ~/bin dir.
Available commands to update: ${GREEN}
bombadillo
delta
gron
micro
nb
starship
svtplay-dl
youtube-dl
zola
${NC}(Well, gron doesn’t work at the moment since it only does prereleases which are not visible in the Github API)"

os="linux"
if [[ "$OSTYPE" =~ ^darwin ]]; then
  os="macos"
elif [[ "$OSTYPE" = "linux-android" ]]; then
  os="termux"
fi

mkdir -p ~/tmp

# Utility functions
print_help() {
  echo -e "$USAGE"
  exit 0
}

get_github_version() {
  local latest_version
  latest_version=$(
    curl \
      --silent \
      --header "Accept: application/vnd.github.v3+json" \
      "https://api.github.com/repos/$1/releases/latest" |
    grep '"tag_name":' |
    sed -E 's/.*"([^"]+)".*/\1/'
  )
  echo "$latest_version"
}

get_tildegit_version() {
  # This needs jq because Gitea’s API doesn’t return JSON with linebreaks
  local latest_version
  latest_version=$(
    curl \
      --silent \
      --header "Content-Type: application/json" \
      "https://tildegit.org/api/v1/repos/$1/releases/?page=1&limit=1" |
    jq . |
    grep '"tag_name":' |
    sed -E 's/.*"([^"]+)".*/\1/'
  )
  echo "$latest_version"
}

# Update functions
function update_bombadillo() {
  local repo="sloum/bombadillo"
  local latest_version
  latest_version=$(get_tildegit_version "$repo")
  if [[ "$os" = "macos" ]]; then
    filename="bombadillo-""$latest_version""_osx_64.zip"
  elif [[ "$os" = "termux" ]]; then
    filename="bombadillo-""$latest_version""_linux_arm.zip"
  elif [[ "$os" = "linux" ]]; then
    filename="bombadillo-""$latest_version""_linux_amd64.zip"
  fi
  echo "Downloading bombadillo $latest_version"
  curl -L https://bombadillo.colorfield.space/binaries/"$filename" -o ~/tmp/bombadillo.zip
  unzip -qqo ~/tmp/bombadillo.zip -d ~/tmp
  mv ~/tmp/bombadillo ~/bin/
  mv ~/tmp/bombadillo.1 ~/bin/
  chmod u+x ~/bin/bombadillo
}

function update_delta() {
  local repo="dandavison/delta"
  local latest_version
  latest_version=$(get_github_version "$repo")
  if [[ "$os" = "macos" ]]; then
    filename="delta-$latest_version-x86_64-apple-darwin.tar.gz"
  elif [[ "$os" = "termux" ]]; then
    echo -e "Please run ${BROWN}apt upgrade git-delta${NC} instead."
    exit 0
  elif [[ "$os" = "linux" ]]; then
    filename="delta-$latest_version-x86_64-unknown-linux-gnu.tar.gz"
  fi
  echo "Downloading delta $latest_version"
  curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/delta.tgz
  # --strip 1 makes sure we only get the files and not an extra container directory
  tar xzf ~/tmp/delta.tgz --directory ~/tmp --strip 1
  mv ~/tmp/delta ~/bin/
}

function update_gron() {
  echo -e "${RED}SORRY!${NC} Downloading gron is not posible at the moment."
  exit 1
  local latest_version
  latest_version=$(get_github_version "tomnomnom/gron")
  if [[ "$os" = "macos" ]]; then
    filename="gron-darwin-amd64-$latest_version.tgz"
  elif [[ "$os" = "termux" ]]; then
    filename="gron-linux-arm64-$latest_version.tgz"
  fi
  curl -L https://github.com/tomnomnom/gron/releases/download/"$latest_version"/"$filename" -o ~/tmp/gron.tgz
  tar xzf ~/tmp/gron.tgz
  mv ~/tmp/gron ~/bin/
}

function update_micro() {
  local repo="zyedidia/micro"
  local latest_version
  local clean_version
  latest_version=$(get_github_version "$repo")
  clean_version=$(echo "$latest_version" | tr -d 'v')
  if [[ "$os" = "macos" ]]; then
    filename="micro-$clean_version-osx.tar.gz"
  elif [[ "$os" = "termux" ]]; then
    echo -e "Please run ${BROWN}apt upgrade micro${NC} instead."
    exit 0
  elif [[ "$os" = "linux" ]]; then
    filename="micro-$clean_version-linux64.tar.gz"
  fi
  echo "Downloading micro $latest_version"
  curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/micro.tgz
  tar xzf ~/tmp/micro.tgz --directory ~/tmp --strip 1
  mv ~/tmp/micro ~/bin/
}

function update_nb() {
  curl -L https://raw.github.com/xwmx/nb/master/nb -o ~/bin/nb &&
  chmod +x ~/bin/nb &&
  nb completions install --download
}

function update_starship() {
  local repo="starship/starship"
  local latest_version
  latest_version=$(get_github_version "$repo")
  if [[ "$os" = "macos" ]]; then
    filename="starship-x86_64-apple-darwin.tar.gz"
  elif [[ "$os" = "termux" ]]; then
    echo -e "Please run ${BROWN}apt upgrade starship${NC} instead."
    exit 0
  elif [[ "$os" = "linux" ]]; then
    filename="starship-x86_64-unknown-linux-gnu.tar.gz"
  fi
  echo "Downloading starship $latest_version"
  curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/starship.tgz
  tar xzf ~/tmp/starship.tgz --directory ~/tmp
  mv ~/tmp/starship ~/bin/
}

function update_svt() {
  echo "Downloading latest version of svtplay-dl"
  curl -L https://svtplay-dl.se/download/latest/svtplay-dl -o ~/bin/svtplay-dl
  chmod u+x ~/bin/svtplay-dl
}

function update_youtube() {
  echo "Downloading latest version of youtube-dl"
  curl -L https://yt-dl.org/downloads/latest/youtube-dl -o ~/bin/youtube-dl
  chmod u+x ~/bin/youtube-dl
}

function update_zola() {
  local repo="getzola/zola"
  local latest_version
  latest_version=$(get_github_version "$repo")
  if [[ "$os" = "macos" ]]; then
    filename="zola-$latest_version-x86_64-apple-darwin.tar.gz"
  elif [[ "$os" = "termux" ]]; then
    echo -e "Sorry, ${BLUE}zola${NC} is not available for termux."
    exit 0
  elif [[ "$os" = "linux" ]]; then
    filename="zola-$latest_version-x86_64-unknown-linux-gnu.tar.gz"
  fi
  echo -e "Downloading ${BLUE}zola${NC} $latest_version"
  curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/zola.tgz
  tar xzf ~/tmp/zola.tgz --directory ~/tmp
  mv ~/tmp/zola ~/bin/
}

command="${1:-}"
case "$command" in
  "bombadillo") update_bombadillo ;;
  "delta") update_delta ;;
  "gron") update_gron ;;
  "micro") update_micro ;;
  "nb") update_nb ;;
  "starship") update_starship ;;
  "svtplay-dl" | "svtplay" | "svt") update_svt ;;
  "youtube-dl" | "youtube" | "ytdl" | "yt") update_youtube ;;
  "zola") update_zola ;;
  *) print_help ;;
esac
