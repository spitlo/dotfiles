#!/usr/bin/env bash
# shellcheck disable=SC1090
set -eu
trap 'catch $?' EXIT

# Binenv does about the same as this script: https://github.com/devops-works/binenv
# Commands we might want to support (from the binenv list):
# ~bat~, ~fzf~, ~zola~, git-extras, tunnelto

# Constants
BLUE='\033[1;34m'
BROWN='\033[0;33m'
GREEN='\033[1;32m'
NC='\033[0m'
RED='\033[0;31m'
COMMANDS="\
  bat \
  bombadillo \
  delta \
  fzf \
  grit \
  gron \
  h2c \
  micro \
  nb \
  starship \
  svtplay-dl \
  wp-cli \
  youtube-dl \
  zola \
"
COMMANDS="$(echo "$COMMANDS" | tr ' ' '\n' | sort -u | xargs)"
USAGE="
${BROWN}Usage${NC}: $0 [command]
Utility script to update a few smaller commands that live in my ~/bin dir.
Available commands to update: ${GREEN}
${COMMANDS}
${NC}(Actually, updating gron doesn’t work at the moment since it only does prereleases which are not visible in the Github API)"

os="linux"
if [[ "$OSTYPE" =~ ^darwin ]]; then
  cpu=$(uname -p)
  if [[ "$cpu" = "i386" ]]; then
    os="macos"
  else
    os="macos-arm"
  fi
elif [[ "$OSTYPE" = "linux-android" ]]; then
  os="termux"
elif [[ "$OSTYPE" = "linux-gnueabihf" ]]; then
  os="raspberry"
fi
force=""

mkdir -p ~/tmp

#    __  ____  _ ___ __           ____                 __  _
#   / / / / /_(_) (_) /___  __   / __/_  ______  _____/ /_(_)___  ____  _____
#  / / / / __/ / / / __/ / / /  / /_/ / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
# / /_/ / /_/ / / / /_/ /_/ /  / __/ /_/ / / / / /__/ /_/ / /_/ / / / (__  )
# \____/\__/_/_/_/\__/\__, /  /_/  \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/
#                    /____/
function catch() {
  if [[ "$1" = "127" ]]; then
    # 127 is "Command not found". If it’s not installed, version checking will throw an error.
    # Invite user to bypass version checking with the --force flag.
    echo -e "Error updating ${BLUE}$cmd${NC}. Perhaps it’s not installed yet?"
    echo -e "Try ${BROWN}update $cmd --force${NC} instead."
  fi
}

function print_help() {
  echo -e "$USAGE"
  exit 0
}

function exists() {
  local cmd
  cmd=${1:?"Please supply a command to look for."}
  command -v "$cmd" >/dev/null 2>&1 && { return 0; } || { return 1; }
}

function print_heading() {
  echo -e "\n$1"
  printf %${#1}s'\n' ' ' | tr " " "="
}

function print_versions() {
  echo -e "${YELLOW}Local version${NC}: $1"
  echo -e "${YELLOW}Latest version${NC}: $2"  
}

function get_confirmation() {
  print_versions "$1" "$2"
  read -erp "Continue? (y/n) " -n 1
  if [ "$REPLY" != "y" ]; then
    echo -e "\nOk, quitting!\n${BLUE}Bye!${NC}"
    exit 0
  fi
}

function compare_versions() {
  local version_string
  version_string=${3:-"--version"}
  if exists "$1"; then
    local_version=$("$1" "$version_string")
    print_heading "Command '$1'"
    print_versions "$local_version" "$2"
    return
  else
    echo -e "\nCommand ${BLUE}$1${NC} is not installed yet."
    return 0
  fi
}

function list_updates() {
  local cmd_list
  declare -a cmd_list=( $COMMANDS  )
  for cmd in "${cmd_list[@]}"; do
    "update_$cmd" get_versions
  done
}

function get_github_version() {
  local latest_version
  latest_version=$(
    curl \
      --silent \
      --header "Accept: application/vnd.github.v3+json" \
      "https://api.github.com/repos/$1/releases/latest" |
    grep '"tag_name":' |
    sed -E 's/.*"([^"]+)".*/\1/'
  )
  echo "$latest_version"
}

function get_tildegit_version() {
  # This needs jq because Gitea’s API doesn’t return JSON with linebreaks
  local latest_version
  latest_version=$(
    curl \
      --silent \
      --header "Content-Type: application/json" \
      "https://tildegit.org/api/v1/repos/$1/releases/?page=1&limit=1" |
    jq . |
    grep '"tag_name":' |
    sed -E 's/.*"([^"]+)".*/\1/'
  )
  echo "$latest_version"
}

#    __  __          __      __          ____                 __  _
#   / / / /___  ____/ /___ _/ /____     / __/_  ______  _____/ /_(_)___  ____  _____
#  / / / / __ \/ __  / __ `/ __/ _ \   / /_/ / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
# / /_/ / /_/ / /_/ / /_/ / /_/  __/  / __/ /_/ / / / / /__/ /_/ / /_/ / / / (__  )
# \____/ .___/\__,_/\__,_/\__/\___/  /_/  \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/
#     /_/
function update_bat() {
  local repo="sharkdp/bat"
  local filename
  local latest_version
  latest_version=$(get_github_version "$repo")

  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    compare_versions bat "$latest_version"
    return
  fi
  
  # Give user a chance to exit
  if [ -z "$force" ]; then
    local local_version
    local_version=$(bat --version)
    get_confirmation "$local_version" "$latest_version"
  fi

  if [[ "$os" =~ ^macos.* ]]; then
    filename="bat-$latest_version-x86_64-apple-darwin.tar.gz"
    if [[ "$os" = "macos-arm" ]]; then
      echo -e "Sorry, no ${BLUE}bat${NC} release available for Apple Silicon at the moment."
      read -erp "Install x86 version? (y/n) " -n 1
      if [ "$REPLY" != "y" ]; then
        echo -e "Ok! Please run ${BROWN}cargo install bat${NC} instead."
        exit 0
      fi
    fi
  elif [[ "$os" = "termux" ]]; then
    echo -e "Please run ${BROWN}apt upgrade bat${NC} instead."
    exit 0
  elif [[ "$os" = "raspberry" ]]; then
    filename="bat-$latest_version-arm-unknown-linux-gnueabihf.tar.gz"
  elif [[ "$os" = "linux" ]]; then
    filename="bat-$latest_version-x86_64-unknown-linux-gnu.tar.gz"
  fi
  echo -e "Downloading ${BLUE}bat${NC} $latest_version ($filename)"
  curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/bat.tgz
  # --strip 1 makes sure we only get the files and not an extra container directory
  tar xzf ~/tmp/bat.tgz --directory ~/tmp --strip 1
  mv ~/tmp/bat ~/bin/
}

function update_bombadillo() {
  local repo="sloum/bombadillo"
  local filename
  local latest_version
  latest_version=$(get_tildegit_version "$repo")

  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    compare_versions bombadillo "$latest_version" "-v"
    return
  fi
  
  # Give user a chance to exit
  if [ -z "$force" ]; then
    local local_version
    local_version=$(bombadillo -v)
    get_confirmation "$local_version" "$latest_version"
  fi

  if [[ "$os" = "macos" ]]; then
    filename="bombadillo-""$latest_version""_osx_64.zip"
  elif [[ "$os" = "macos-arm" ]]; then
    echo -e "Sorry, no ${BLUE}bombadillo${NC} release available for Apple Silicon at the moment."
    exit 0
  elif [[ "$os" = "termux" ]] || [[ "$os" = "raspberry" ]]; then
    filename="bombadillo-""$latest_version""_linux_arm.zip"
  elif [[ "$os" = "linux" ]]; then
    filename="bombadillo-""$latest_version""_linux_amd64.zip"
  fi
  echo -e "Downloading ${BLUE}bombadillo${NC} $latest_version ($filename)"
  curl -L https://bombadillo.colorfield.space/binaries/"$filename" -o ~/tmp/bombadillo.zip
  unzip -qqo ~/tmp/bombadillo.zip -d ~/tmp
  mv ~/tmp/bombadillo ~/bin/
  mv ~/tmp/bombadillo.1 ~/bin/
  chmod u+x ~/bin/bombadillo
}

function update_delta() {
  local repo="dandavison/delta"
  local filename
  local latest_version
  latest_version=$(get_github_version "$repo")

  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    compare_versions delta "$latest_version"
    return
  fi
  
  # Give user a chance to exit
  if [ -z "$force" ]; then
    local local_version
    local_version=$(delta --version)
    get_confirmation "$local_version" "$latest_version"
  fi

  if [[ "$os" =~ ^macos.* ]]; then
    filename="delta-$latest_version-x86_64-apple-darwin.tar.gz"
    if [[ "$os" = "macos-arm" ]]; then
      echo -e "Sorry, no ${BLUE}delta${NC} release available for Apple Silicon at the moment."
      read -erp "Install x86 version? (y/n) " -n 1
      if [ "$REPLY" != "y" ]; then
        echo -e "Ok! Please run ${BROWN}cargo install delta${NC} instead."
        exit 0
      fi
    fi
  elif [[ "$os" = "termux" ]]; then
    echo -e "Please run ${BROWN}apt upgrade git-delta${NC} instead."
    exit 0
  elif [[ "$os" = "raspberry" ]]; then
    filename="delta-$latest_version-arm-unknown-linux-gnueabihf.tar.gz"
  elif [[ "$os" = "linux" ]]; then
    filename="delta-$latest_version-x86_64-unknown-linux-gnu.tar.gz"
  fi
  echo -e "Downloading ${BLUE}delta${NC} $latest_version ($filename)"
  curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/delta.tgz
  # --strip 1 makes sure we only get the files and not an extra container directory
  tar xzf ~/tmp/delta.tgz --directory ~/tmp --strip 1
  mv ~/tmp/delta ~/bin/
}

function update_fzf() {
  local repo="junegunn/fzf"
  local filename
  local latest_version
  latest_version=$(get_github_version "$repo")

  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    compare_versions fzf "$latest_version"
    return
  fi
  
  # Give user a chance to exit
  if [ -z "$force" ]; then
    local local_version
    local_version=$(fzf --version)
    get_confirmation "$local_version" "$latest_version"
  fi

  if [[ "$os" =~ ^macos.* ]]; then
    if [[ "$os" = "macos" ]]; then
      filename="fzf-$latest_version-darwin_amd64.zip"
    else
      filename="fzf-$latest_version-darwin_arm64.zip"
    fi
    echo -e "Downloading ${BLUE}fzf${NC} $latest_version ($filename)"
    curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/fzf.zip
    unzip -qqo ~/tmp/fzf.zip -d ~/tmp
  elif [[ "$os" = "termux" ]]; then
    echo -e "Please run ${BROWN}apt upgrade fzf${NC} instead."
    exit 0
  elif [[ "$os" = "linux" ]] || [[ "$os" = "raspberry" ]]; then
    if [[ "$os" = "raspberry" ]]; then
      filename="fzf-$latest_version-linux_armv7.tar.gz"
    else
      filename="fzf-$latest_version-linux_amd64.tar.gz"
    fi
    echo -e "Downloading ${BLUE}fzf${NC} $latest_version ($filename)"
    curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/fzf.tgz
    tar xzf ~/tmp/fzf.tgz --directory ~/tmp # --strip 1 # Not needed?
  fi
  mv ~/tmp/fzf ~/bin/
}

function update_grit() {
  local repo="climech/grit"
  local filename
  local latest_version
  latest_version=$(get_github_version "$repo")

  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    print_heading "Command 'grit'"
    echo -e "Can’t get ${BLUE}grit${NC} versions, skipping."
    return
  fi

  # Give user a chance to exit
  if [ -z "$force" ]; then
    local local_version
    local_version=$(grit --version)
    get_confirmation "$local_version" "$latest_version"
  fi

  if [[ "$os" = "macos" ]]; then
    filename="grit_${latest_version}_darwin_amd64.tar.gz"
  elif [[ "$os" = "macos-arm" ]]; then
    filename="grit_${latest_version}_darwin_arm64.tar.gz"
  elif [[ "$os" = "termux" ]]; then
    filename="grit_${latest_version}_linux_arm7.tar.gz"
  elif [[ "$os" = "raspberry" ]]; then
    filename="grit_${latest_version}_linux_arm7.tar.gz"
  elif [[ "$os" = "linux" ]]; then
    filename="grit_${latest_version}_linux_amd64.tar.gz"
  fi
  echo -e "Downloading ${BLUE}grit${NC} $latest_version ($filename)"
  curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/grit.tgz
  tar xzf ~/tmp/grit.tgz --directory ~/tmp --strip 1
  mv ~/tmp/grit ~/bin/
}

function update_gron() {
  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    return
  fi

  echo -e "${RED}SORRY!${NC} Downloading gron is not possible at the moment."
  return
  # local repo="tomnomnom/gron"
  # local filename
  # local latest_version
  # latest_version=$(get_github_version "$repo")
  # # Give user a chance to exit
  # if [ -z "$force" ]; then
  #   local local_version
  #   local_version=$(gron --version)
  #   get_confirmation "$local_version" "$latest_version"
  # fi

  # if [[ "$os" = "macos" ]]; then
  #   filename="gron-darwin-amd64-$latest_version.tgz"
  # elif [[ "$os" = "termux" ]]; then
  #   filename="gron-linux-arm64-$latest_version.tgz"
  # fi
  # curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/gron.tgz
  # tar xzf ~/tmp/gron.tgz
  # mv ~/tmp/gron ~/bin/
}

function update_h2c() {
  # https://github.com/curl/h2c/raw/1.0/h2c
  local repo="curl/h2c"
  local latest_version
  latest_version=$(get_github_version "$repo")

  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    print_heading "Command 'h2c'"
    echo -e "${BLUE}h2c${NC} does not have a version flag."
    echo -e "Latest version is: ${YELLOW}$latest_version${NC}"
    return
  fi

  # h2c has no version command, proceed with install
  echo -e "Downloading ${BLUE}h2c${NC} $latest_version"
  curl -L https://github.com/"$repo"/raw/"$latest_version"/h2c -o ~/bin/h2c
  chmod u+x ~/bin/h2c
}

function update_micro() {
  local repo="zyedidia/micro"
  local filename
  local latest_version
  latest_version=$(get_github_version "$repo")

  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    compare_versions micro "$latest_version"
    return
  fi

  # Give user a chance to exit
  if [ -z "$force" ]; then
    local local_version
    local_version=$(micro --version)
    get_confirmation "$local_version" "$latest_version"
  fi

  local clean_version
  clean_version=$(echo "$latest_version" | tr -d 'v')
  if [[ "$os" =~ ^macos.* ]]; then
    filename="micro-$clean_version-osx.tar.gz"
  elif [[ "$os" = "termux" ]]; then
    echo -e "Please run ${BROWN}apt upgrade micro${NC} instead."
    exit 0
  elif [[ "$os" = "raspberry" ]]; then
    filename="micro-$clean_version-linux-arm.tar.gz"
  elif [[ "$os" = "linux" ]]; then
    filename="micro-$clean_version-linux64.tar.gz"
  fi
  echo -e "Downloading ${BLUE}micro${NC} $latest_version ($filename)"
  curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/micro.tgz
  tar xzf ~/tmp/micro.tgz --directory ~/tmp --strip 1
  mv ~/tmp/micro ~/bin/
}

function update_nb() {
  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    print_heading "Command 'nb'"
    echo -e "Can’t get ${BLUE}nb${NC} versions, skipping."
    return
  fi

  curl -L https://raw.github.com/xwmx/nb/master/nb -o ~/tmp/nb
  mv ~/tmp/nb ~/bin/
  chmod u+x ~/bin/nb
  nb completions install --download
}

function update_starship() {
  local repo="starship/starship"
  local filename
  local latest_version
  latest_version=$(get_github_version "$repo")

  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    compare_versions starship "$latest_version" "-V"
    return
  fi

  # Give user a chance to exit
  if [ -z "$force" ]; then
    local local_version
    local_version=$(starship -V)
    get_confirmation "$local_version" "$latest_version"
  fi

  if [[ "$os" = "macos" ]]; then
    filename="starship-x86_64-apple-darwin.tar.gz"
  elif [[ "$os" = "macos-arm" ]]; then
    filename="starship-aarch64-apple-darwin.tar.gz"
  elif [[ "$os" = "termux" ]]; then
    echo -e "Please run ${BROWN}apt upgrade starship${NC} instead."
    exit 0
  elif [[ "$os" = "raspberry" ]]; then
    filename="starship-arm-unknown-linux-musleabihf.tar.gz"
  elif [[ "$os" = "linux" ]]; then
    filename="starship-x86_64-unknown-linux-gnu.tar.gz"
  fi
  echo -e "Downloading ${BLUE}starship${NC} $latest_version ($filename)"
  curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/starship.tgz
  tar xzf ~/tmp/starship.tgz --directory ~/tmp
  mv ~/tmp/starship ~/bin/
}

function update_svtplay-dl() {
  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    print_heading "Command 'svtplay-dl'"
    echo -e "Can’t get ${BLUE}svtplay-dl${NC} versions, skipping."
    return
  fi

  echo -e "Downloading latest version of ${BLUE}svtplay-dl${NC}"
  wget https://svtplay-dl.se/download/latest/svtplay-dl -O ~/bin/svtplay-dl
  chmod u+x ~/bin/svtplay-dl
}

function update_wp-cli() {
  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    print_heading "Command 'wp-cli'"
    echo -e "Can’t get ${BLUE}wp-cli${NC} versions, skipping."
    return
  fi

  echo -e "Downloading latest version of ${BLUE}wp-cli${NC}"
  wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -O ~/bin/wp
  chmod u+x ~/bin/wp
}

function update_youtube-dl() {
  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    print_heading "Command 'youtube-dl'"
    echo -e "Can’t get ${BLUE}youtube-dl${NC} versions, skipping."
    return
  fi

  echo -e "Downloading latest version of ${BLUE}youtube-dl${NC}"
  wget https://yt-dl.org/downloads/latest/youtube-dl -O ~/bin/youtube-dl
  chmod u+x ~/bin/youtube-dl
}

function update_zola() {
  local repo="getzola/zola"
  local filename
  local latest_version
  latest_version=$(get_github_version "$repo")

  # Only print versions when requested
  local arg=${1:-}
  if [[ "$arg" = "get_versions" ]]; then
    compare_versions zola "$latest_version"
    return
  fi

  # Give user a chance to exit
  if [ -z "$force" ]; then
    local local_version
    local_version=$(zola --version)
    get_confirmation "$local_version" "$latest_version"
  fi

  if [[ "$os" =~ ^macos.* ]]; then
    filename="zola-$latest_version-x86_64-apple-darwin.tar.gz"
  elif [[ "$os" = "termux" ]] || [[ "$os" = "raspberry" ]]; then
    echo -e "Sorry, ${BLUE}zola${NC} is not available for $os."
    exit 0
  elif [[ "$os" = "linux" ]]; then
    filename="zola-$latest_version-x86_64-unknown-linux-gnu.tar.gz"
  fi
  echo -e "Downloading ${BLUE}zola${NC} $latest_version ($filename)"
  curl -L https://github.com/"$repo"/releases/download/"$latest_version"/"$filename" -o ~/tmp/zola.tgz
  tar xzf ~/tmp/zola.tgz --directory ~/tmp
  mv ~/tmp/zola ~/bin/
}

# If user supplied no arguments, print help and exit
if [ $# -eq 0 ]; then
  print_help
fi

# Handle arguments
for arg in "$@"; do
  if [ "$arg" = "--force" ] || [ "$arg" = "-f" ]; then
    force="yes"
  elif [ "$arg" = "--help" ] || [ "$arg" = "-h" ]; then
    echo -e "$USAGE"
    exit 0
  elif [ "$arg" = "--list" ] || [ "$arg" = "-l" ]; then
    echo "$COMMANDS"
    exit 0
  elif [ "$arg" = "--list-updates" ] || [ "$arg" = "-u" ]; then
    list_updates
    exit 0
  else
    cmd="$arg"
  fi
done

# Handle command
case " $COMMANDS " in
  *" $cmd "*) update_"$cmd" ;;
  *) print_help ;;
esac
